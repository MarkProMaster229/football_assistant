import init
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json

class Stat:
    def __init__(self):
        self.bot = init.chatBot
        self.tours_dict = {}
        self.touch = {}
        self.load_json()
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("tea_"))(self.statSelected)

    def load_json(self):
        with open("matches.json", "r", encoding="utf-8") as f:
            data2 = json.load(f)
        for obj in data2:
            tour_name = obj["tour"]
            match_info = {
                "date": obj["date"],
                "time": obj["time"],
                "home": obj["home"],
                "away": obj["away"],
                "score": obj["score"]
            }
            if tour_name not in self.tours_dict:
                self.tours_dict[tour_name] = []
            self.tours_dict[tour_name].append(match_info)


    def statGame(self, msg):
        self.tours_dict.clear()  # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(row_width=2)


        json_path = "matches.json"
        try:
            with open(json_path, "r", encoding="utf-8") as f:
                data2 = json.load(f)
            print(f"[LOG] JSON –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(data2)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except FileNotFoundError:
            print(f"[ERROR] –§–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        except json.JSONDecodeError as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
            self.bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
            return

        for obj in data2:
            tour_name = obj["tour"].strip()
            print(f"[LOG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä: '{tour_name}'")
            keyboard.add(InlineKeyboardButton(tour_name, callback_data=f"tea_{tour_name}"))

            match_info = {
                "date": obj["date"],
                "time": obj["time"],
                "home": obj["home"],
                "away": obj["away"],
                "score": obj["score"]
            }
            self.tours_dict.setdefault(tour_name, []).append(match_info)

        print(f"[LOG] –í—Å–µ–≥–æ —Ç—É—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {list(self.tours_dict.keys())}")
        self.bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä:", reply_markup=keyboard)

    def statSelected(self, call):
        selected_name = call.data.split("_", 1)[1].strip()
        self.touch[call.from_user.id] = selected_name

        print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª —Ç—É—Ä: '{selected_name}'")
        if selected_name not in self.tours_dict:
            print(f"[ERROR] –¢—É—Ä '{selected_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ")
            self.bot.send_message(call.message.chat.id, "–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
            return

        tour_matches = self.tours_dict[selected_name]
        text = "\n".join(
            f"{m['date']} {m['time']} {m['home']} - {m['away']} : {m['score']}" for m in tour_matches
        )
        self.bot.send_message(call.message.chat.id, text)
